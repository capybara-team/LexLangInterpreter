/*
 Maxwell Souza 201435009
 Rodolpho Rossete 201435032
 */

program(data, funcs) ::= <<
import java.io.InputStreamReader;
import java.util.Scanner;
public class Main {

    <data; separator="\n\n">

    static Scanner _reader = new Scanner(new InputStreamReader(System.in));
    static Object[] _ret;

    public static int read() {
        return Integer.valueOf(_reader.nextLine());
    }

    public static void main(String args[]) {
        main();
    }

    <funcs; separator="\n\n">
}
>>

data(name, decl) ::= <<
static class <name> {
    <decl; separator="\n">
}
>>

decl(id, type) ::= "public <type> <id>;"

func(type, name, params, cmd) ::= <<
static <type> <name>(<params; separator=", ">) {
    <cmd>
}
>>

contextDecl(decl, cmd) ::= <<
<if(decl)><decl; separator=";\n">;<endif>
<cmd>
>>

multipleCmds(cmds) ::= <<
<cmds; separator="\n" >
>>

param(type, name) ::= "<type> <name>"

closure(cmds, decl) ::= <<
{
    <cmds>
}
>>

if(expr, cmd, els) ::= <<
if(<expr>) {
    <cmd>
}<if(els)> else {
    <els>
}
<endif>
>>

iterate(expr, cmd, counter) ::= <<
int _cond_<counter> = <expr>;
for(int _i_<counter> = 0; _i_<counter> \< _cond_<counter>; _i_<counter>++) {
    <cmd>
}
>>


print(exp) ::= "System.out.print(<exp>);"
read(lvalue) ::= "<lvalue> = read();"
attr(lvalue, exp) ::= "<lvalue> = <exp>;"

funcCmd(id, exps, attr, counter) ::= <<
<if(attr)>_ret = <endif><id>(<exps; separator=", ">);
<attr; separator="\n">
>>

funcCmdAttr(lvalue, type, index, counter) ::= "<lvalue> = (<type>)_ret[<index>];"

returnCmd(values) ::= <<return new Object[]{<values; separator=", ">};>>

// expressions

andExp(lExp, rExp) ::= "(<lExp> && <rExp>)"

lessThanRexp(lExp, rExp) ::= "<lExp> \< <rExp>"
eqRexp(lExp, rExp) ::= "<lExp> == <rExp>"
neqRexp(lExp, rExp) ::= "<lExp> != <rExp>"

plusAexp(lExp, rExp) ::= "<lExp> + <rExp>"
subAexp(lExp, rExp) ::= "<lExp> - <rExp>"
multMexp(lExp, rExp) ::= "<lExp> * <rExp>"
divMexp(lExp, rExp) ::= "<lExp> / <rExp>"
modMexp(lExp, rExp) ::= "<lExp> % <rExp>"

notSexp(exp) ::= "!<exp>"
negativeSexp(exp) ::= "-<exp>"

charSexp(exp) ::= "'<exp>'"
floatSexp(exp) ::= "<exp>f"

closurePexp(exp) ::= "(<exp>)"
instancePexp(type, depth, exp) ::= "new <type><if(exp)>[<exp>]<endif><depth>"

funcCallPexp(id, exps, type, exp) ::= <<(<type>) <id>(<exps; separator=", ">)[<exp>]>>
